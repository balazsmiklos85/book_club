plugins {
	alias(libs.plugins.spring.dependency.management)
	alias(libs.plugins.jacoco)
	alias(libs.plugins.java)
	alias(libs.plugins.liquibase.gradle)
	alias(libs.plugins.sonarqube)
	alias(libs.plugins.spring.boot)
}

group = 'hu.bmiklos'
version = '1.5.0.0'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
    implementation libs.commons.collections4
    implementation libs.spring.boot.starter.data.jpa
    implementation libs.spring.boot.starter.security
    implementation libs.spring.boot.starter.thymeleaf
    implementation libs.spring.boot.starter.web
    implementation libs.liquibase.core
    implementation libs.thymeleaf.extras.springsecurity6
    runtimeOnly libs.h2.runtime
    runtimeOnly libs.postgresql.runtime
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.spring.security.test
    testImplementation libs.h2.runtime
}

configurations {
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntime
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
	}
}

sonar {
	properties {
		property 'sonar.projectKey', 'balazsmiklos85_book_club'
		property 'sonar.organization', 'balazsmiklos85'
		property 'sonar.host.url', 'https://sonarcloud.io'
		property 'sonar.token', System.env.SONARCLOUD_TOKEN
		property 'sonar.branch.name', System.env.GITHUB_HEAD_REF ?: (System.env.GITHUB_REF_NAME ?: 'local_build')
	}
}

sourceSets {
	integrationTest {
		compileClasspath += sourceSets.main.output + sourceSets.test.output
		runtimeClasspath += sourceSets.main.output + sourceSets.test.output
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

task devRun {
	bootRun.configure {
		systemProperty "spring.profiles.active", 'dev'
		environment 'PORT', 8080
	}
	finalizedBy 'bootRun'
}

task integrationTest(type: Test) {
	description = "Run integration tests"
	group = "verification"
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	environment 'PORT', 8080

	useJUnitPlatform()

	testLogging {
		events "passed"
	}
}

task stage(dependsOn: ['build', 'clean'])

