// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/java-postgres
{
	"name": "Java & PostgreSQL",
	"dockerComposeFile": "docker-compose.yml",
	"features": {
		"ghcr.io/devcontainers/features/node:1": {
			"version": "14.17.0"
		}
	},
	"service": "app",
	"workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",
	"containerEnv": {
		"DATABASE_URL": "jdbc:postgresql://localhost:5432/postgres?user=postgres&password=postgres",
		"PORT": "8080",
		"SONARCLOUD_TOKEN": "${localEnv:SONARCLOUD_TOKEN}"
	},
	"customizations": {
		"vscode": {
			"extensions": [
				"jebbs.plantuml",
				"GitHub.copilot",
				"GitHub.vscode-pull-request-github",
				"eamodio.gitlens",
				"vmware.vscode-boot-dev-pack",
				"vscjava.vscode-gradle",
				"cweijan.vscode-postgresql-client2",
				"ms-azuretools.vscode-docker",
				"redhat.vscode-xml",
				"SonarSource.sonarlint-vscode",
				"vscjava.vscode-java-debug",
				"vscjava.vscode-java-test",
				"vscjava.vscode-java-dependency",
				"redhat.java"
			],
			"settings": {
				"sonarlint.ls.javaHome": "/usr/lib/jvm/msopenjdk-current/"
			}
		}
	},

	// Features to add to the dev container. More info: https://containers.dev/features.
	// "features": {}

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// This can be used to network with other containers or with the host.
	"forwardPorts": [8080]

	// Use 'postCreateCommand' to run commands after the container is created.
	// "postCreateCommand": "java --version"

	// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
	// "remoteUser": "root"
}
